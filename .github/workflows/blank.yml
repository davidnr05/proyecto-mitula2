name: CI/CD Mitula Scraper

on:
  push:
    branches:
      - master  # Se ejecutará en cada push a la rama "main"
  pull_request:
    branches:
      - master  # También se ejecutará en cada PR a "main"

jobs:
  lint:
    name: Revisión de Código con flake8
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Instalar dependencias
        run: pip install flake8

      - name: Revisar código con flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    name: Ejecutar Pruebas Unitarias
    runs-on: ubuntu-latest
    needs: lint  # Se ejecuta después de la revisión de código

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Instalar dependencias
        run: pip install -r requirements.txt pytest pytest-mock boto3 requests beautifulsoup4
      - name: Verificar paquetes instalados
        run: pip list
      - name: Ejecutar pruebas unitarias con pytest
        run: pytest test_scraper.py --maxfail=1 --disable-warnings

  deploy:
    name: Desplegar en AWS con Zappa
    runs-on: ubuntu-latest
    needs: test  # Se ejecuta solo si las pruebas pasan

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Crear y activar entorno virtual
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=venv" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/venv/bin" >> $GITHUB_PATH
      - name: Instalar Zappa y dependencias
        run: |
          source venv/bin/activate
          pip install -r requirements.txt zappa

      - name: Configurar credenciales de AWS
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials
          echo "region=us-east-1" >> ~/.aws/credentials
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
          export AWS_DEFAULT_REGION="us-east-1"


      - name: Verificar si la función Lambda ya existe
        id: check_lambda
        run: |
          source venv/bin/activate
          if aws lambda get-function --function-name proyecto-mitula-dev --region us-east-1; then
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Desplegar con Zappa (deploy si no existe, update si ya existe)
        run: |
          source venv/bin/activate
          if zappa status dev 2>&1 | grep -q "ACTIVE\|deployed"; then
            echo "Aplicación ya desplegada, ejecutando update..."
            zappa update dev
          else
            echo "Aplicación no encontrada, ejecutando deploy..."
            zappa deploy dev
          fi


    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      